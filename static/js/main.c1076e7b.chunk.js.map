{"version":3,"sources":["components/PortfolioThing/PortfolioThing.jsx","components/Portfolio/Portfolio.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["PortfolioThing","props","className","id","site","title","target","href","url","about","technologies","map","tech","i","length","portfolio","screenshot","Portfolio","Header","targer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAyBeA,G,sBAnBQ,SAAAC,GACnB,OACI,yBAAKC,UAAU,iBAAiBC,GAAIF,EAAMG,KAAKD,IAC3C,yBAAKD,UAAU,QACX,4BAAKD,EAAMG,KAAKC,OAChB,2BACI,uBAAGC,OAAO,SAASC,KAAMN,EAAMG,KAAKI,KAApC,cADJ,IAC4D,6BACvDP,EAAMG,KAAKK,MAFhB,IAEuB,6BACnB,mDACCR,EAAMG,KAAKM,aAAaC,KAAI,SAACC,EAAMC,GAAP,OAC7B,8BAAOD,EAAMC,EAAIZ,EAAMG,KAAKM,aAAaI,OAAS,EAAI,IAAM,GAA5D,aCXdC,EAAY,CAClB,CACAZ,GAAI,SACJE,MAAO,UACPG,IAAK,gCACLQ,WAAY,kCACZP,MAAO,kNACPC,aAAc,CAAC,QAAS,UAAW,UAAW,aAAc,YAAa,WAAY,MAAO,cAE5F,CACAP,GAAG,YACHE,MAAO,aACPG,IAAK,4CACLQ,WAAY,kCACZP,MAAO,yIACPC,aAAc,CAAC,SAAU,SAAU,oBAAqB,aAAc,MAAO,cAE7E,CACAP,GAAI,MACJE,MAAO,yBACPG,IAAK,sCACLQ,WAAY,kCACZP,MAAO,sIACPC,aAAc,CAAC,UAAW,UAAW,YAAa,eAAgB,MAAO,cAEzE,CACAP,GAAI,QACJE,MAAO,qBACPG,IAAK,8DACLQ,WAAY,kCACZP,MAAO,mLACPC,aAAc,CAAC,OAAQ,aAAc,MAAO,eAgB7BO,EAZG,SAAAhB,GACd,OACI,yBAAKC,UAAU,aACVa,EAAUJ,KAAI,SAAAP,GAAI,OACf,kBAAC,EAAD,CACIA,KAAMA,SC1BXc,G,MAhBA,SAAAjB,GACX,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,gBACf,iDACA,uDAA4B,6BAA5B,oBAEA,6BACI,uBAAGK,KAAK,wCAAR,SADJ,qBAEI,uBAAGY,OAAO,SAASZ,KAAK,uCAAxB,UAFJ,oBAGI,uBAAGY,OAAO,SAASZ,KAAK,kDAAxB,gBCGDa,MATf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1076e7b.chunk.js","sourcesContent":["import React from 'react';\nimport './PortfolioThing.css';\nimport { Link } from 'react-router-dom';\n\n\n\nconst PortfolioThing = props => {\n    return (\n        <div className=\"PortfolioThing\" id={props.site.id}>\n            <div className=\"info\">\n                <h2>{props.site.title}</h2>\n                <p>\n                    <a target=\"_blank\" href={props.site.url}>Visit Site</a> <br/>\n                    {props.site.about} <br/>\n                    <h3>Technologies Used: </h3>\n                    {props.site.technologies.map((tech, i)=> \n                    <span>{tech}{i < props.site.technologies.length - 1 ? \",\" : \"\" } </span>\n                    )} \n                </p>\n               \n            </div>\n        </div>\n    )\n}\n\nexport default PortfolioThing;","import React from 'react';\nimport './Portfolio.css';\nimport PortfolioThing from '../PortfolioThing/PortfolioThing';\n\n\nconst portfolio = [\n{\nid: \"myeats\",\ntitle: \"My Eats\",\nurl: \"http://my-eats.herokuapp.com/\",\nscreenshot: \"https://i.imgur.com/wsnJZMk.png\",\nabout: \"My Eats is an app for those who cook on a whim, simply sign in and start adding what's in your kitchen to your 'ingredients', and look choose from a list of recipes that use the ingredients you already have!\",\ntechnologies: [\"React\", \"Node.js\", \"Express\", \"JavaScript\", \"JWT Auth.\", \"Mongoose\", \"CSS\", \"Photoshop\"]\n},\n{\nid:\"memeworld\",\ntitle: \"Meme World\",\nurl: \"https://memeworld-project3.herokuapp.com/\",\nscreenshot: \"https://i.imgur.com/KPb4ViY.png\",\nabout: \"Meme World is a simple meme generator that offers its users a handful of fun customizable options when creating memes fresh new memes.\",\ntechnologies: [\"Python\", \"Django\", \"AWS image uploads\", \"PostgreSQL\", \"CSS\", \"Photoshop\"]\n},\n{\nid: \"fit\",\ntitle: \"8 FIT exercise tracker\",\nurl: \"https://fit-eightfit.herokuapp.com/\",\nscreenshot: \"https://i.imgur.com/g9gdNDN.png\",\nabout: \"This exercise tracker makes it easy for its users to save and find their own exercise routines, as well as look at others routines.\",\ntechnologies: [\"Node.js\", \"Express\", \"Mongooose\", \"Google OAuth\", \"CSS\", \"Photoshop\"]\n},\n{\nid: \"bonez\",\ntitle: \"BONEZ Slot-Machine\",\nurl: \"https://charlesmacmillan.github.io/GAME-Bonez-Slot-Machine/\",\nscreenshot: \"https://i.imgur.com/OF2xZEl.png\",\nabout: \"BONEZ is a puppy-themed slot machine I created while learning how to create interractive web applications with vanilla JavaScript. I love dogs, and thought this was really fun.\",\ntechnologies: [\"HTML\", \"JavaScript\", \"CSS\", \"Photoshop\"]\n},\n]\n\nconst Portfolio = props => {\n    return (\n        <div className=\"Portfolio\">\n            {portfolio.map(site => \n                <PortfolioThing \n                    site={site}\n                />   \n            )}\n        </div>\n    )\n}\n\nexport default Portfolio;","import React from 'react';\nimport './Header.css';\n\nconst Header = props => {\n    return (\n        <div className=\"Header\">\n            <div className=\"profile-pic\"></div>\n            <h1>Charles MacMillan</h1>\n            <p>Full-Stack Web Developer <br/>\n            Dillon, Colorado</p>\n            <div>\n                <a href=\"mailto:charlesmacmillanpro@gmail.com\">Email</a> &nbsp;&nbsp;|&nbsp;&nbsp;\n                <a targer=\"_blank\" href=\"https://github.com/charlesmacmillan\">gitHub</a>&nbsp;&nbsp;|&nbsp;&nbsp;\n                <a targer=\"_blank\" href=\"https://www.linkedin.com/in/charles-macmillan/\">LinkedIn</a>\n                </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Portfolio from './components/Portfolio/Portfolio';\nimport Header from './components/Header/Header';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Portfolio /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}